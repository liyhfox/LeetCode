Description:
  Given an array of 2n integers, your task is to group these integers into n pairs of integer, 
say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

Note:
  1. n is a positive integer, which is in the range of [1, 10000].
  2. All the integers in the array will be in the range of [-10000, 10000].
  
Solution(own):
======================
class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        std::sort( nums.begin(), nums.end() );
        int maxSum = 0;
        for(int i = 0; i < nums.size(); ++i)
            if (i % 2 == 0)
                maxSum += nums[i];
            
        return maxSum;
    }
};

Soliton(O(n)):
======================
class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        vector<int> hashtable(20001,0); // initialize a vector with size 20001, default value 0
        for(size_t i=0;i<nums.size();i++)
        {
            hashtable[nums[i]+10000]++;
        }
        int ret=0;
        int flag=0;
        for(size_t i=0;i<20001;){
            if((hashtable[i]>0)&&(flag==0)){
                ret=ret+i-10000;
                flag=1;
                hashtable[i]--;
            }else if((hashtable[i]>0)&&(flag==1)){
                hashtable[i]--;
                flag=0;
            }else i++;
        }
        return ret;
    }
};
