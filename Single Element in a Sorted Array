Description:
Given a sorted array consisting of only integers where every element appears twice except for one element which appears once. 
Find this single element that appears only once.

Note:
Your solution should run in O(log n) time and O(1) space

Solution(own):
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        for (int i = 0; i < nums.size(); i += 2) {
            if (i == nums.size() - 1) return nums[i];
            if (nums[i] ^ nums[i+1]) return nums[i] ^ nums[i+1] ^ nums[i+2];
        }
    }
};

Solution(binarySearch):
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size(), left = 0, right = n - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (mid % 2 == 0) {
                if (nums[mid] == nums[mid-1]) right = mid - 2;
                else if (nums[mid] == nums[mid+1]) left = mid + 2;
                else return nums[mid];
            }
            else {
                if (nums[mid] == nums[mid-1]) left = mid + 1;
                else if (nums[mid] == nums[mid+1]) right = mid - 1;
            }
        }
        return nums[left];
    }
};
